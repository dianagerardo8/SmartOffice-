// ESP32 que envia os dados

#include <WiFi.h>
#include <esp_now.h>
#include <DHT.h>

#define DHTPIN 4       // Pino do sensor DHT22
#define DHTTYPE DHT11  // Modelo do sensor

DHT dht(DHTPIN, DHTTYPE);
uint8_t receptorMac[] = {0x08, 0xB6, 0x1F, 0xEF, 0x82, 0x1C};  // MAC do ESP32 receptor 08:B6:1F:EF:82:1C

typedef struct struct_message 
{
    float temperatura;
} struct_message;

struct_message dados;

void enviarCallback(const uint8_t *macAddr, esp_now_send_status_t status) 
{
    Serial.print("Estado do envio: ");
    Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Sucesso" : "Falha");
}

void setup() 
{
    Serial.begin(115200);
    WiFi.mode(WIFI_STA);
    if (esp_now_init() != ESP_OK) 
    {
        Serial.println("Erro ao iniciar ESP-NOW");
        return;
    }
    
    esp_now_register_send_cb(enviarCallback);
    esp_now_peer_info_t peerInfo;
    memcpy(peerInfo.peer_addr, receptorMac, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;

    if (esp_now_add_peer(&peerInfo) != ESP_OK) 
    {
        Serial.println("Falha ao adicionar peer");
        return;
    }

    dht.begin();
}

void loop() 
{
    dados.temperatura = dht.readTemperature();
    
    if (!isnan(dados.temperatura)) 
    {
        Serial.print("Enviando temperatura: ");
        Serial.println(dados.temperatura);
        esp_now_send(receptorMac, (uint8_t *)&dados, sizeof(dados));
    } 
    else 
    {
        Serial.println("Erro na leitura do sensor");
    }
    
    delay(2000);
}
