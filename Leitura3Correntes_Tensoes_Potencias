#include <SPI.h>
#include <ADE9000RegMap.h>
#include <ADE9000API.h>
#include <math.h>

/* Basic initializations */
ADE9000Class ade9000;
#define SPI_SPEED 5000000     // SPI Speed
#define CS_PIN 17             // Projeto 2 --> 17
#define ADE9000_RESET_PIN 18  // Projeto 2 --> 18
#define PM_1 8                // Projeto 2 --> 8
#define PM_0 3                // Projeto 2 --> 3

// Constantes do sistema para a corrente
const float Full_Scale_IRMS_Value = 52702092;
const float Full_Scale_I_Value = 245.5 / 2;

float ValorA_Corrente;
float ValorB_Corrente;
float ValorC_Corrente;

// Constantes do sistema para a tensão
const float Full_Scale_VRMS_Value = 52702092;
const float Full_Scale_V_Value = 801 / sqrt(2);

float ValorA_Tensao;
float ValorB_Tensao;
float ValorC_Tensao;

// Constantes do sistema para a potência
const float Full_Scale_P_Value = 20694066;

float ValorA_Potencia;
float ValorB_Potencia;
float ValorC_Potencia;

// Estruturas para medidas
struct VoltageRMSRegs VoltageRMSRegs;  // Estrutura para tensão RMS
struct CurrentRMSRegs CurntRMSRegs;    // Estrutura para corrente RMS
struct ActivePowerRegs PowerRegs;      // Estrutura para potência ativa

// Prototipagem
void resetADE9000(void);
void readRegisterData(void);
void readResampledData(void);

void setup() {
  Serial.begin(115200);
  Serial.println("Serial Monitor OK");

  pinMode(PM_1, OUTPUT);
  digitalWrite(PM_1, LOW);  // PSM1 mode
  pinMode(PM_0, OUTPUT);
  digitalWrite(PM_0, LOW);  // PSM0 mode

  pinMode(ADE9000_RESET_PIN, OUTPUT);
  digitalWrite(ADE9000_RESET_PIN, HIGH);

  resetADE9000();

  delay(1000);
  ade9000.SPI_Init(SPI_SPEED, CS_PIN);  // Inicializa SPI
  ade9000.SetupADE9000();               // Inicializa registos do ADE9000

  // Verificação da comunicação SPI
  ade9000.SPI_Write_32(ADDR_BIGAIN, 7);
  uint32_t teste = ade9000.SPI_Read_32(ADDR_BIGAIN);

  if (teste == 7) {
    Serial.println("Comunicacao SPI OK.");
  } else {
    Serial.println("Erro na comunicacao SPI");
  }
}

void loop() {
  readRegisterData();
  delay(2000);
}

void readRegisterData() {
  ade9000.ReadVoltageRMSRegs(&VoltageRMSRegs);
  ade9000.ReadCurrentRMSRegs(&CurntRMSRegs);
  ade9000.ReadActivePowerRegs(&PowerRegs);

  int32_t ValorRMSA_V = VoltageRMSRegs.VoltageRMSReg_A;
  int32_t ValorRMSB_V = VoltageRMSRegs.VoltageRMSReg_B;
  int32_t ValorRMSC_V = VoltageRMSRegs.VoltageRMSReg_C;

  int32_t ValorRMSA_I = CurntRMSRegs.CurrentRMSReg_A;
  int32_t ValorRMSB_I = CurntRMSRegs.CurrentRMSReg_B;
  int32_t ValorRMSC_I = CurntRMSRegs.CurrentRMSReg_C;
  int32_t ValorRMSN_I = CurntRMSRegs.CurrentRMSReg_N;

  int32_t ValorPowerA = PowerRegs.ActivePowerReg_A;
  int32_t ValorPowerB = PowerRegs.ActivePowerReg_B;
  int32_t ValorPowerC = PowerRegs.ActivePowerReg_C;

  ValorA_Tensao = (ValorRMSA_V * Full_Scale_V_Value) / Full_Scale_VRMS_Value;
  ValorB_Tensao = (ValorRMSB_V * Full_Scale_V_Value) / Full_Scale_VRMS_Value;
  ValorC_Tensao = (ValorRMSC_V * Full_Scale_V_Value) / Full_Scale_VRMS_Value;

  ValorA_Corrente = ((ValorRMSA_I * Full_Scale_I_Value) / Full_Scale_IRMS_Value);
  ValorB_Corrente = ((ValorRMSB_I * Full_Scale_I_Value) / Full_Scale_IRMS_Value);
  ValorC_Corrente = ((ValorRMSC_I * Full_Scale_I_Value) / Full_Scale_IRMS_Value);

  ValorA_Potencia = (ValorPowerA * (Full_Scale_V_Value * Full_Scale_I_Value)) / Full_Scale_P_Value;
  ValorB_Potencia = (ValorPowerB * (Full_Scale_V_Value * Full_Scale_I_Value)) / Full_Scale_P_Value;
  ValorC_Potencia = (ValorPowerC * (Full_Scale_V_Value * Full_Scale_I_Value)) / Full_Scale_P_Value;

  Serial.print("FASE A (A): ");
  Serial.println(ValorA_Corrente, 4);
  Serial.print("FASE B (A): ");
  Serial.println(ValorB_Corrente, 4);
  Serial.print("FASE C (A): ");
  Serial.println(ValorC_Corrente, 4);

  Serial.print("FASE A (V): ");
  Serial.println(ValorA_Tensao, 3);
  Serial.print("FASE B (V): ");
  Serial.println(ValorB_Tensao, 3);
  Serial.print("FASE C (V): ");
  Serial.println(ValorC_Tensao, 3);

  Serial.print("POTENCIA FASE A (W): ");
  Serial.println(ValorA_Potencia, 3);
  Serial.print("POTENCIA FASE B (W): ");
  Serial.println(ValorB_Potencia, 3);
  Serial.print("POTENCIA FASE C (W): ");
  Serial.println(ValorC_Potencia, 3);
}

void resetADE9000(void) {
  digitalWrite(ADE9000_RESET_PIN, LOW);
  delay(50);
  digitalWrite(ADE9000_RESET_PIN, HIGH);
  delay(1000);
  Serial.println("Reset Done");
}
